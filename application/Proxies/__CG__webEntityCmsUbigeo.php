<?php

namespace Proxies\__CG__\web\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CmsUbigeo extends \web\Entity\CmsUbigeo implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setCodPostal($codPostal)
    {
        $this->__load();
        return parent::setCodPostal($codPostal);
    }

    public function getCodPostal()
    {
        if ($this->__isInitialized__ === false) {
            return $this->_identifier["codPostal"];
        }
        $this->__load();
        return parent::getCodPostal();
    }

    public function setDpto($dpto)
    {
        $this->__load();
        return parent::setDpto($dpto);
    }

    public function getDpto()
    {
        $this->__load();
        return parent::getDpto();
    }

    public function setProv($prov)
    {
        $this->__load();
        return parent::setProv($prov);
    }

    public function getProv()
    {
        $this->__load();
        return parent::getProv();
    }

    public function setDist($dist)
    {
        $this->__load();
        return parent::setDist($dist);
    }

    public function getDist()
    {
        $this->__load();
        return parent::getDist();
    }

    public function setCregion($cregion)
    {
        $this->__load();
        return parent::setCregion($cregion);
    }

    public function getCregion()
    {
        $this->__load();
        return parent::getCregion();
    }

    public function setCsubregion($csubregion)
    {
        $this->__load();
        return parent::setCsubregion($csubregion);
    }

    public function getCsubregion()
    {
        $this->__load();
        return parent::getCsubregion();
    }

    public function setCodDpto($codDpto)
    {
        $this->__load();
        return parent::setCodDpto($codDpto);
    }

    public function getCodDpto()
    {
        $this->__load();
        return parent::getCodDpto();
    }

    public function setCodProv($codProv)
    {
        $this->__load();
        return parent::setCodProv($codProv);
    }

    public function getCodProv()
    {
        $this->__load();
        return parent::getCodProv();
    }

    public function setPais(\web\Entity\CmsPais $pais = NULL)
    {
        $this->__load();
        return parent::setPais($pais);
    }

    public function getPais()
    {
        $this->__load();
        return parent::getPais();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'codPostal', 'dpto', 'prov', 'dist', 'cregion', 'csubregion', 'codDpto', 'codProv', 'pais');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}