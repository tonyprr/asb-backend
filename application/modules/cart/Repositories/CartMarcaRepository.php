<?php

namespace cart\Repositories;

use Doctrine\ORM\EntityRepository;
use Vendors\Paginate\Paginate;
use Tonyprr\Exception\ValidacionException;
/**
 * CartMarcaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartMarcaRepository extends EntityRepository
{
    
    public function listRecords($state="TODOS", $language=1, $pageStart=NULL, $pageLimit=NULL) {
        $count= 0;
        $oLanguage = $this->_em->getRepository("\web\Entity\CmsLanguage")->findOneByidLanguage($language);

        $qbMarca = $this->_em->createQueryBuilder();
        $qbMarca->select(
                'm.idmarca,m.logo,m.orden,m.estado,m.nombre
                ,ml.detalle as detalleMarca'
                )->from($this->_entityName,'m')
                ->innerJoin('m.languages','ml')
                ->where("ml.language = :lang")->setParameter('lang', $oLanguage)
                ->orderBy("m.orden", "DESC");
        
        if ($state != "TODOS")
            $qbMarca->andWhere('m.estado = :estado')->setParameter('estado', 1);
        $qyMarca = $qbMarca->getQuery();
        
        if ($pageStart!= NULL and $pageLimit!=NULL) {
            $count = Paginate::getTotalQueryResults($qyMarca);
            $qyMarca->setFirstResult($pageStart)->setMaxResults($pageLimit);
            $aMarcas = $qyMarca->getResult();
        } else {
            $aMarcas = $qyMarca->getResult();
            $count = count($aMarcas);
        }
        
        return array($aMarcas, $count);
    }
    
    
    public function save(array $formData, $pathMarca) {
        try {
            $subioArchivo = false;
                
            if (is_numeric($formData['idmarca']) ) {
                $oMarca = $this->_em->find($this->_entityName, $formData['idmarca'] );
            } else {
                $oMarca = new \cart\Entity\CartMarca();
                $dqlList = "SELECT ml from \web\Entity\CmsLanguage ml WHERE ml.estado=1";
                $qbLanguage = $this->_em->createQuery($dqlList);
                $aLanguage = $qbLanguage->getResult();
                foreach ($aLanguage as $oLanguage) {
                    $oMarcaLanguage = new \cart\Entity\CartMarcaLanguage();
                    $oMarcaLanguage->setMarca($oMarca)
                                    ->setLanguage($oLanguage)
                                    ->setDetalle("ingresar detalle...");
                    $oMarca->addLanguage($oMarcaLanguage);
                }
            }
            $oMarca->setEstado(isset($formData['estado'])?1:0);
            $oMarca->setOrden($formData['orden']);
            $oMarca->setNombre($formData['nombre']);
            $oMarca->setFechaActualizacion( new \DateTime() );

            /* Subir archivo de imagen */
            $tipo = strtolower($_FILES['file_image']['type']);
            if ($tipo == "image/jpg" || $tipo =="image/jpeg" || $tipo =="image/pjpeg") {
                $aInfoImg = pathinfo($_FILES['file_image']['name']);
                $nomArchivoImg = trim("marca_" . time() . '_' . $oMarca->getIdmarca()) .'.' . 'jpg';//$aInfoImg['extension']
                @move_uploaded_file($_FILES['file_image']['tmp_name'], $pathMarca . $nomArchivoImg);
                
                $objThumb = new \Tonyprr_Thumb();
//                $res1=$objThumb->thumbjpeg_replace_fijo($this->_pathMarca . $nomArchivoImg,200,130);
                $res2=$objThumb->thumbjpeg($pathMarca . $nomArchivoImg,"",140,'thumb_');
                @unlink($pathMarca . trim($oMarca->getLogo()));
                @unlink($pathMarca . 'thumb_' . trim($oMarca->getLogo()));
                
                $oMarca->setLogo($nomArchivoImg);
                $subioArchivo = true;
            }
            if ($subioArchivo == true) {
                $this->_em->persist($oMarca);
                $this->_em->flush();
            }
            
            $this->_em->persist($oMarca);
            $this->_em->flush();
            return $oMarca;
        } catch(\Exception $e) {
            throw new \Exception ("Error al guardar registro.",2);
        }
    }

    public function getById($id, $language=1, $asArray=true, $soloActivo=true) {
        
        $oLanguage = $this->_em->getRepository("\web\Entity\CmsLanguage")->findOneByLanguage($language);
        
        $dqlList = 'SELECT sp.idmarca,sp.logo,sp.orden,sp.estado,sp.nombre
                           ,spl.detalle as detalle_marca
                    from '. $this->_entityName . ' sp 
                    INNER JOIN sp2.languages spl
                    WHERE sp.idmarca = ?1 AND spl.language = ?2';
        $qyMarca = $this->_em->createQuery($dqlList);
        $qyMarca->setParameter(1,$id)->setParameter(2, $oLanguage);
        if ($asArray) {
            $oMarca = $qyMarca->getArrayResult();
            $objRecords = \Tonyprr_lib_Records::getInstance();
            if (count($oMarca) != 1)
                throw new Exception('No existe este registro.',1);
            $objRecords->normalizeRecord($oMarca[0]);
            $oMarca = $oMarca[0];
        } else {
            $oMarca = $qyMarca->getSingleResult();
        }
        return $oMarca;
    }
    
    public function delete($idRegistro, $pathMarca) {
        try {
            //$oMarca = new \cart\Entity\CartMarca();
            $oMarca = $this->_em->find($this->_entityName, $idRegistro);
            $qyTotalProductos = $this->_em->createQuery('SELECT COUNT(p.idproducto) FROM \cart\Entity\CartProducto p WHERE p.marca = ?1')
                    ->setParameter(1, $oMarca);
            $totalProductos = (int) $qyTotalProductos->getSingleScalarResult();
            
            if ($totalProductos > 0)
                throw new ValidacionException("Existe Productos asociados con esta marca", 2);
            if(!$oMarca) 
                throw new ValidacionException("No exite Marca con el ID ".$idRegistro .".", 2);
            @unlink($pathMarca . trim($oMarca->getLogo()));
            @unlink($pathMarca . 'thumb_' . trim($oMarca->getLogo()));
            $this->_em->remove($oMarca);
            $this->_em->flush();
        } catch(ValidacionException $e) {
            throw new ValidacionException($e->getMessage(), $e->getCode());
        } catch(\Exception $e) {
            throw new \Exception("Error en el proceso de eliminar la Marca.", 1);
        }
    }
    
    
}
