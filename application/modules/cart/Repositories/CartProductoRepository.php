<?php

namespace cart\Repositories;

use Doctrine\ORM\EntityRepository;
use Vendors\Paginate\Paginate;

/**
 * CartProductoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartProductoRepository extends EntityRepository
{
    public function listRecords($idcontCate=NULL, $oLanguage=1, $estado="TODOS", $pageStart=NULL, $pageLimit=NULL, $textoBusqueda=NULL, $stock=0) {
        $count= NULL;
        if(!$oLanguage instanceof \web\Entity\CmsLanguage)
            $oLanguage = $this->_em->getRepository("\web\Entity\CmsLanguage")->findOneByidLanguage($oLanguage);
        
        $oProductoCategoria = null;
        if ($idcontCate != NULL) {
            $oProductoCategoria = $this->_em->find("\cart\Entity\CartProductoCategoria", $idcontCate );
            if(!($oProductoCategoria instanceof \cart\Entity\CartProductoCategoria)) {
                throw new \Exception('No existe la categoria del producto.',1);
            }
        }

        $qbProducto = $this->_em->createQueryBuilder();
        $qbProducto->select(
                    '
                    p.idproducto,p.precio,p.precio1,p.precio2,p.codigoProducto,
                    p.cantidad,p.cantidadVendidos,p.peso,p.imagen,p.adjunto,p.orden,p.estado,p.fechainipub,
                    p.fechafinpub,p.fechamodif,p.fechareg,
                    pl.nombre as nombre_producto,pl.intro as intro_producto,pl.ficha,
                    ca.idcontcate,cal.descripcion as nameCate,
                    ma.idmarca,
                    t.idTipo
                    '
                    )->from($this->_entityName,'p')
                   ->innerJoin('p.contcate','ca')->innerJoin('p.languages','pl')->leftJoin('p.marca','ma')->leftJoin('p.tipo','t')
                    ->innerJoin('ca.languages','cal')
                    ->andWhere("pl.language = :lang")->setParameter('lang', $oLanguage)
                    ->andWhere("cal.language = :lang")->setParameter('lang', $oLanguage);
        if ($idcontCate != NULL) $qbProducto->andWhere('p.contcate = :categoria')->setParameter('categoria', $oProductoCategoria);
        if ($estado != "TODOS")
            $qbProducto->andWhere('p.estado = :estado')->setParameter('estado', 1);
        if ($textoBusqueda != NULL) {
            $qbProducto->andWhere($qbProducto->expr()->like('pl.nombre', '?1'))->setParameter(1, '%' . $textoBusqueda . '%')->orderBy('pl.nombre','ASC');
        } else {
            $qbProducto->orderBy('p.orden','ASC');
        }
        if ($stock == true) $qbProducto->andWhere('p.cantidad >= :stock')->setParameter('stock', $stock);
        $qyProducto = $qbProducto->getQuery();
        
        if ($pageStart!= NULL and $pageLimit!=NULL) {
            $count = Paginate::getTotalQueryResults($qyProducto);
            $qyProducto->setFirstResult($pageStart)->setMaxResults($pageLimit);
            $aProductos = $qyProducto->getResult();
        } else {
            $aProductos = $qyProducto->getResult();
            $count = count($aProductos);
        }
        
        return array($aProductos, $count, $oProductoCategoria);
    }

    
    /**
     *
     * @param int $id
     * @param boolean $asArray
     * @param boolean $soloActivo
     * @return \CmsProducto $oProducto
     */
    public function getById($id, $oLanguage=null, $asArray=true, $soloActivo=false) {
        try {
            if ($asArray) {
                if(!$oLanguage instanceof \web\Entity\CmsLanguage)
                    $oLanguage = $this->_em->getRepository("\web\Entity\CmsLanguage")->findOneByidLanguage($oLanguage);

                $qbProducto = $this->_em->createQueryBuilder();
                $qbProducto->select(
                            '
                            p.idproducto,p.precio,p.precio1,p.precio2,p.codigoProducto,
                            p.cantidad,p.cantidadVendidos,p.peso,p.imagen,p.adjunto,p.orden,p.estado,p.fechainipub,
                            p.fechafinpub,p.fechamodif,p.fechareg,
                            pl.nombre as nombre_producto,pl.intro as intro_producto,pl.ficha,
                            ca.idcontcate,cal.descripcion as nameCate,
                            ma.idmarca,
                            t.idTipo
                            '
                            )->from($this->_entityName,'p')
                            ->innerJoin('p.contcate','ca')->innerJoin('p.languages','pl')->leftJoin('p.marca','ma')->leftJoin('p.tipo','t')
                            ->innerJoin('ca.languages','cal')
                            ->andWhere("pl.language = :lang")->setParameter('lang', $oLanguage)
                            ->andWhere("cal.language = :lang")->setParameter('lang', $oLanguage)
                            ->andWhere("p.estado = :estado")->setParameter('estado', $soloActivo)
                            ->andWhere("p.idproducto = :id")->setParameter('id', $id);
                $qyProducto = $qbProducto->getQuery();
                $oProducto = $qyProducto->getArrayResult();
                if (count($oProducto) != 1)
                    throw new \Exception('No existe este registro o no se encuentra disponible.', 1);
                $objRecords=\Tonyprr_lib_Records::getInstance();
                $objRecords->normalizeRecord($oProducto[0]);
                $oProducto = $oProducto[0];
                return $oProducto;
            } else {
                try {
                    $oProducto = $this->_em->getRepository($this->_entityName)->find($oLanguage);
                    $idsToFilter = array($oLanguage);
                    $oProductoLang = $oProducto->getLanguages()->filter(
                            function($oProductoLang) use ($idsToFilter) {
                                return in_array($oProductoLang->getLanguage(), $idsToFilter);
                            })->first();
                } catch(\Doctrine\ORM\NoResultException $e) {
                    throw new \Exception('No existe este registro o no se encuentra disponible.',1);
                }
                return array($oProducto, $oProductoLang);
            }
        } catch(\Doctrine\ORM\NoResultException $e) {
            if ($e->getCode() == 1) throw new \Exception($e->getMessage(),1);
            else throw new \Exception('Ocurri√≥ un error en el procesamiento, estaremos solucionandolo en breve.',1);
        }
        
    }
    
    
}
