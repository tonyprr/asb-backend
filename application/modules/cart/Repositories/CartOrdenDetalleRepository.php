<?php

namespace cart\Repositories;

use Doctrine\ORM\EntityRepository;
use Vendors\Paginate\Paginate;

/**
 * CartOrdenDetalleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartOrdenDetalleRepository extends EntityRepository
{
    /**
     *
     * @param \cart\Entity\CartOrden $oOrden
     * @param int $pageStart
     * @param int $pageLimit
     * @return mixed
     */
    public function listRecords($oOrden, $pageStart=NULL, $pageLimit=NULL) {
        $count= 0;
        $qbOrdenDetalle = $this->_em->createQueryBuilder();
        $qbOrdenDetalle->select(
                    '
                    od.idOrdenDetalle,od.productoNombre,od.cantidad,od.precioUnitario,od.precioTotal,p.imagen, p.codigoProducto
                    ')->from($this->_entityName, 'od')
                   ->innerJoin('od.producto','p')
                   ->orderBy('od.fechaRegistro','DESC')
                   ->where('od.orden = :orden')->setParameter('orden', $oOrden);
        $qyOrdenDetalle = $qbOrdenDetalle->getQuery();//,pa.nombre as nombre_pais
        
        if ($pageStart!= NULL and $pageLimit!=NULL) {
            $count = Paginate::getTotalQueryResults($qyOrdenDetalle);
            $qyOrdenDetalle->setFirstResult($pageStart)->setMaxResults($pageLimit);
        }
        return array($qyOrdenDetalle, $count);
    }

    
    /**
     *
     * @param array $formData
     * @param \cart\Entity\CartOrden $oOrden
     * @param \cart\Entity\CartProducto $oProducto
     * @return \cart\Entity\CartOrdenDetalle 
     */
    public function save($formData, $oOrden = null, $oProducto = null) {
        try {
            
            $newRegister = false;
            $subioArchivo = false;
            
            if (!$oOrden instanceof \cart\Entity\CartOrden)
                $oOrden = $this->_em->find("\cart\Entity\CartOrden", $formData['idOrden'] );
            if(!$oOrden)
                throw new \Exception('No existe Orden.',1);
            
            if (!$oProducto instanceof \cart\Entity\CartProducto)
                $oProducto = $this->_em->find("\cart\Entity\CartProducto", $formData['idproducto'] );
            if(!$oProducto)
                throw new \Exception('No existe Producto.',1);
            
            
            if (is_numeric($formData['idOrdenDetalle']) ) {
                $oOrdenDetalle = $this->_em->find($this->_entityName, $formData['idOrdenDetalle'] );
            } else {
                $oOrdenDetalle = new \cart\Entity\CartOrdenDetalle();
                $newRegister = true;
            }
                
            $oOrdenDetalle->setCantidad($formData['cantidad']);
            $oOrdenDetalle->setOrden($oOrden);
            $oOrdenDetalle->setProducto($oProducto);
            $oOrdenDetalle->setPrecioTotal($formData['precioTotal']);
            $oOrdenDetalle->setPrecioUnitario($formData['precioUnitario']);
            $oOrdenDetalle->setProductoNombre(isset($formData['tituloConte'])?$formData['tituloConte']:$oProducto->getTituloConte());
//            $oOrdenDetalle->setFechaModificacion( new \DateTime() );
            $this->_em->persist($oOrdenDetalle);
            $this->_em->flush();
            return $oOrdenDetalle;
        } catch(\Exception $e) {
            if ($e->getCode() == 1) throw new \Exception($e->getMessage(),1);
            throw new \Exception('Error al guardar registro direcciÃ³n.',1);
        }
    }
    
    public function delete($idRegistro) {
        try {
            $oOrdenDetalle = $this->_em->find($this->_entityName, $idRegistro);
            if(!$oOrdenDetalle) 
                throw new \Exception("No exite OrdenDetalle con el ID ".$idRegistro .".",2);
            @unlink($this->_pathOrdenDetalle . trim($oOrdenDetalle->getFoto()));
            $this->_em->remove($oOrdenDetalle);
            $this->_em->flush();
        } catch(\Exception $e) {
            throw new \Exception("Error en el proceso de eliminar el OrdenDetalle.",1);
        }
    }


    public function getById($id, $asArray=true) {
        $dqlList = 'SELECT c FROM \cart\Entity\CartOrdenDetalle c WHERE c.idOrdenDetalle = ?1';
        $qyOrdenDetalle = $this->_em->createQuery($dqlList);
        $qyOrdenDetalle->setParameter(1,$id);
        if ($asArray) {
            $oOrdenDetalle = $qyOrdenDetalle->getArrayResult();
            $objRecords = \Tonyprr_lib_Records::getInstance();
            if (count($oOrdenDetalle) != 1)
                throw new \Exception('No existe este registro.',1);
            $objRecords->normalizeRecord($oOrdenDetalle[0]);
            $oOrdenDetalle = $oOrdenDetalle[0];
        } else {
            $oOrdenDetalle = $qyOrdenDetalle->getSingleResult();
        }
        return $oOrdenDetalle;
    }
    
    
}
