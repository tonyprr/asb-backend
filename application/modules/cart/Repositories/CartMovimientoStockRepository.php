<?php

namespace cart\Repositories;

use Doctrine\ORM\EntityRepository;
use Vendors\Paginate\Paginate;

/**
 * CartMovimientoStockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartMovimientoStockRepository extends EntityRepository
{
    /**
     * 
     * @param int $idMovStockTipo
     * @param mixed $oLanguage
     * @param boolean $asArray
     * @param int $pageStart
     * @param int $pageLimit
     * @return array
     * @throws \Exception
     */
    public function listRecords($idMovStockTipo=NULL, $oLanguage=NULL, $asArray = true, $pageStart=NULL, $pageLimit=NULL) {
        $count= NULL;
        if ($idMovStockTipo != NULL) {
            $oMovimientoStockTipo = $this->_em->find("\cart\Entity\CartMovimientoStockTipo", $idMovStockTipo );
            if(!($oMovimientoStockTipo instanceof \cart\Entity\CartMovimientoStockTipo)) {
                throw new \Exception('No existe el Tipo de Movimiento de Stock.', 1);
            }
        }
        
        if (!$oLanguage instanceof \web\Entity\CmsLanguage)
            $oLanguage = $this->_em->getRepository("\web\Entity\CmsLanguage")->findOneByidLanguage($oLanguage);
        
        $qbMovimientoStock = $this->_em->createQueryBuilder();
        $qbMovimientoStock->select(
                    "
                    ms.idMovimientoStock,ms.cantidad,ms.fechaRegistro,ms.fechaActualizacion,ms.iduser,
                    ms.fechaIngreso,ms.fechaCaducidad,
                    p.idproducto,pl.nombre as producto_nombre,
                    o.idOrden,
                    mst.idMovimientoStockTipo,mst.nombre as movTipo_nombre,mst.signo
                    "
                    )->from($this->_entityName,'ms')
                    ->innerJoin('ms.producto','p')->innerJoin('p.languages','pl')
                    ->leftJoin('ms.orden','o')->innerJoin('ms.movimientoStockTipo','mst')
                    ->where("pl.language = :lang")->setParameter("lang", $oLanguage)
                    ->orderBy('ms.fechaRegistro','DESC');
        if ($idMovStockTipo != NULL) $qbMovimientoStock->andWhere('ms.movimientoStockTipo = :movtipo')->setParameter('movtipo', $oMovimientoStockTipo);
        
        $qyMovimientoStock = $qbMovimientoStock->getQuery();
        if ($pageStart!= NULL and $pageLimit!=NULL) {
            $count = Paginate::getTotalQueryResults($qyMovimientoStock);
            $qyMovimientoStock->setFirstResult($pageStart)->setMaxResults($pageLimit);
        }
        
        if ($asArray) {
            $resultados = $qyMovimientoStock->getArrayResult();
            $objRecords=\Tonyprr_lib_Records::getInstance();
            $objRecords->normalizeRecords($resultados);
        } else  {
            $resultados = $qyMovimientoStock->getResult();
        }
        
        return array($resultados, $count);
    }

    
    public function listRecordsXProducto($idProducto, $idMovStockTipo=NULL, $oLanguage=NULL, $asArray = true, $pageStart=NULL, $pageLimit=NULL) {
        $count= NULL;
        if ($idMovStockTipo != NULL) {
            $oMovimientoStockTipo = $this->_em->find("\cart\Entity\CartMovimientoStockTipo", $idMovStockTipo );
            if(!($oMovimientoStockTipo instanceof \cart\Entity\CartMovimientoStockTipo)) {
                throw new \Exception('No existe el Tipo de Movimiento de Stock.', 1);
            }
        }
        
        if (!$oLanguage instanceof \web\Entity\CmsLanguage)
            $oLanguage = $this->_em->getRepository("\web\Entity\CmsLanguage")->findOneByidLanguage($oLanguage);
        
        $qbMovimientoStock = $this->_em->createQueryBuilder();
        $qbMovimientoStock->select(
                    "
                    ms.idMovimientoStock,ms.cantidad,ms.fechaRegistro,ms.fechaActualizacion,ms.iduser,
                    ms.fechaIngreso,ms.fechaCaducidad,
                    p.idproducto,pl.nombre as producto_nombre,
                    o.idOrden,
                    mst.idMovimientoStockTipo,mst.nombre as movTipo_nombre,mst.signo
                    "
                    )->from($this->_entityName,'ms')
                    ->innerJoin('ms.producto','p')->innerJoin('p.languages','pl')
                    ->leftJoin('ms.orden','o')->innerJoin('ms.movimientoStockTipo','mst')
                    ->where("pl.language = :lang")->setParameter("lang", $oLanguage)
                    ->andWhere("p.idproducto = :id")->setParameter("id", $idProducto)
                    ->orderBy('ms.fechaRegistro','DESC');
        if ($idMovStockTipo != NULL) $qbMovimientoStock->andWhere('ms.movimientoStockTipo = :movtipo')->setParameter('movtipo', $oMovimientoStockTipo);
        
        $qyMovimientoStock = $qbMovimientoStock->getQuery();
        if ($pageStart!= NULL and $pageLimit!=NULL) {
            $count = Paginate::getTotalQueryResults($qyMovimientoStock);
            $qyMovimientoStock->setFirstResult($pageStart)->setMaxResults($pageLimit);
        }
        
        if ($asArray) {
            $resultados = $qyMovimientoStock->getArrayResult();
            $objRecords=\Tonyprr_lib_Records::getInstance();
            $objRecords->normalizeRecords($resultados);
        } else  {
            $resultados = $qyMovimientoStock->getResult();
        }
        
        return array($resultados, $count);
    }


    /**
     *
     * @param array $formData
     * @param \cart\Entity\CartProducto $oProducto
     * @param \cart\Entity\CartOrden $oOrden
     * @param \cart\Entity\CartMovimientoStockTipo $oMovimientoStockTipo
     * @return \cart\Entity\CartMovimientoStock 
     */
    public function save($formData, $oProducto=NULL, $oOrden=NULL, $oMovimientoStockTipo=NULL) {
        try {
            $newRegister = false;
            if (is_numeric($formData['idMovimientoStock']) ) {
                $oMovimientoStock = $this->_em->find("\cart\Entity\CartMovimientoStock", $formData['idMovimientoStock'] );
            }
            else {
                $oMovimientoStock = new \cart\Entity\CartMovimientoStock();
                $oMovimientoStock->setFechaRegistro( new \DateTime() );
                $newRegister = true;
            }

            $oAlmacen = null;
            if (!isset($formData['idAlmacen'])) {
                //$oAlmacen = $this->_em->find("\cart\Entity\CartAlmacen", 1 );
                //$oMovimientoStock->setAlmacen($oAlmacen);
            }
            
            if (!$oMovimientoStockTipo instanceof \cart\Entity\CartMovimientoStockTipo)
                $oMovimientoStockTipo = $this->_em->find("\cart\Entity\CartMovimientoStockTipo", $formData['idMovimientoStockTipo'] );
//            $oMovimientoStockTipo =  new \\cart\Entity\CartMovimientoStockTipo();
            if(!$oMovimientoStockTipo)
                throw new \Exception('No existe tipo.', 1);
                
            if (!$oProducto instanceof \cart\Entity\CartProducto)
                $oProducto = $this->_em->find("\cart\Entity\CartProducto", $formData['idproducto'] );
//                $oProducto =  new \cart\Entity\CartProducto();
            if(!$oProducto)
                throw new \Exception('No existe producto.',1);

            if (!$oOrden instanceof \cart\Entity\CartOrden)
                if(isset ($formData['idOrden'])) {
                    $oOrden = $this->_em->find("\cart\Entity\CartOrden", $formData['idOrden'] );
                    if(!$oOrden)
                        throw new \Exception('No existe orden.',1);
                }
            
            $oMovimientoStock->setCantidad($formData['cantidad']);
            $oMovimientoStock->setProducto($oProducto);
            $oMovimientoStock->setMovimientoStockTipo($oMovimientoStockTipo);
            if(isset ($formData['iduser']))
                $oMovimientoStock->setIduser($formData['iduser']);
            if ($oOrden instanceof \cart\Entity\CartOrden)
                $oMovimientoStock->setOrden($oOrden);
            $oMovimientoStock->setFechaActualizacion( new \DateTime() );
            if (isset($formData['fechaIngreso']))
                $oMovimientoStock->setFechaIngreso( new \DateTime($formData['fechaIngreso']) );
            if (isset($formData['fechaCaducidad']))
            $oMovimientoStock->setFechaCaducidad( new \DateTime($formData['fechaCaducidad']) );
            $this->_em->persist($oMovimientoStock);
            
            /**************************************************************
             * Actualizamos el stock del producto
             */
            $signoMov = $oMovimientoStockTipo->getSigno();
            $stockProducto = $oProducto->getCantidad() + $formData['cantidad']*$signoMov;
            $oProducto->setCantidad($stockProducto);
            
            if ($oOrden instanceof \cart\Entity\CartOrden) {
                $cantidadVendidos = $oProducto->getCantidadVendidos()+$formData['cantidad'];
                $oProducto->setCantidadVendidos($cantidadVendidos);
            }
            $this->_em->persist($oProducto);
            /*************************************************************/
            
            $this->_em->flush();
            
            return $oMovimientoStock;
        } catch(\Exception $e) {
            if ($e->getCode() == 1) throw new \Exception($e->getMessage(), 1);
            throw new \Exception('OcurriÃ³ un error en el procesamiento, estaremos solucionandolo en breve.', 1);
        }
    }
    
    public function delete($idRegistro) {
        try {
            $oMovimientoStock = $this->_em->find($this->_entityName, $idRegistro);
            if(!$oMovimientoStock) 
                throw new \Exception("No exite Movimiento con el ID ".$idRegistro .".",2);
            $this->_em->remove($oMovimientoStock);
            $this->_em->flush();
        } catch(\Exception $e) {
            throw new \Exception("Error en el proceso de eliminar el MovimientoStock.",2);
        }
    }

    /**
     *
     * @param int $id
     * @param boolean $asArray
     * @param boolean $soloActivo
     * @return \cart\Entity\CartMovimientoStock $oMovimientoStock
     */
    public function getById($id, $asArray=true, $soloActivo=false) {
        try {
            $dqlList = 'SELECT mp FROM \cart\Entity\CartMovimientoStock mp WHERE mp.idMovimientoStock = ?1';
            $qyMovimientoStock = $this->_em->createQuery($dqlList);
            $qyMovimientoStock->setParameter(1,$id);
            if($soloActivo) {
                $dqlList .= ' AND  mp.stateConte = 1';
            }
            if ($asArray) {
                $oMovimientoStock = $qyMovimientoStock->getArrayResult();
                $objRecords = \Tonyprr_lib_Records::getInstance();
                if (count($oMovimientoStock) != 1)
                    throw new \Exception('No existe este registro o no se encuentra disponible.',1);
                $objRecords->normalizeRecord($oMovimientoStock[0]);
                $oMovimientoStock = $oMovimientoStock[0];
            } else {
                try {
                    $oMovimientoStock = $qyMovimientoStock->getSingleResult();
                } catch(\Doctrine\ORM\NoResultException $e) {
                    throw new \Exception('No existe este registro o no se encuentra disponible.',1);
                }
            }
            return $oMovimientoStock;
        } catch(\Doctrine\ORM\NoResultException $e) {
            if ($e->getCode() == 1) throw new \Exception($e->getMessage(),1);
            throw new \Exception('Ocurriï¿½ un error en el procesamiento, estaremos solucionandolo en breve.', 1);
        }
        
    }
    
}
